name: Build Kernel with IOCTL

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"
      KERNEL_DEFCONFIG: "vendor/lahaina-qgki_defconfig"
      KERNEL_CMDLINE: "ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- O=out"

    steps:
    # Step 1: Checkout the kernel source
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: "true"
        fetch-depth: 100

    # Step 2: Set up ccache
    - name: Set up ccache
      uses: hendrikmuhs/ccache-action@v1.2

    # Step 3: Install dependencies and download custom Clang
    - name: Install dependencies and set up Clang
      run: |
        sudo apt-get update -y 
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          gcc-arm-linux-gnueabi \
          aria2 \
          binutils \
          make \
          python3 \
          libssl-dev \
          build-essential \
          bc \
          bison \
          flex \
          unzip \
          ca-certificates \
          xz-utils \
          mkbootimg \
          cpio \
          device-tree-compiler \
          git \
          git-lfs
        # Download and set up Clang
        aria2c -j$(nproc --all) $(curl -fsSL https://github.com/ZyCromerZ/Clang/raw/main/Clang-main-link.txt)
        mkdir zyc-clang
        tar -xzvf Clang-*.tar.gz -C zyc-clang >> /dev/null

    # Step 4: Build the kernel
    - name: Build Kernel
      run: |
        export PATH=$(pwd)/zyc-clang/bin/:$PATH
        export CCACHE_DIR=$HOME/.cache/ccache
        export ARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        make $KERNEL_DEFCONFIG
        make -j$(nproc --all) $KERNEL_CMDLINE CC="ccache clang" LD=ld.lld
        cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3

    # Step 5: Build IOCTL Module (Overlay)
    - name: Build IOCTL Module
      run: |
        mkdir -p modules
        cp path/to/overlay.c modules/
        echo "obj-m += overlay.o" > modules/Makefile
        make -C /lib/modules/$(uname -r)/build M=$(pwd)/modules ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules

    # Step 6: Upload Kernel Binary
    - name: Upload Kernel
      uses: actions/upload-artifact@v4
      with:
        name: Built_Kernel
        path: "AnyKernel3/*"

    # Step 7: Upload Kernel Modules (including IOCTL module)
    - name: Upload Kernel Modules
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: Kernel_Modules
        path: "./modules/*.ko"
